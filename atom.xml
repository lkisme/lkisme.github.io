<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>种豆南山下</title>
  
  
  <link href="http://lkisme.github.io/atom.xml" rel="self"/>
  
  <link href="http://lkisme.github.io/"/>
  <updated>2022-04-02T14:13:52.633Z</updated>
  <id>http://lkisme.github.io/</id>
  
  <author>
    <name>KK</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用廉价电视盒子安装Home Assistant</title>
    <link href="http://lkisme.github.io/p/homeassistant-on-cheap-box/"/>
    <id>http://lkisme.github.io/p/homeassistant-on-cheap-box/</id>
    <published>2022-04-02T22:02:25.000Z</published>
    <updated>2022-04-02T14:13:52.633Z</updated>
    
    <content type="html"><![CDATA[<p>本文将包含如下内容：</p><ol><li>Home Assistant简介</li><li>可安装Armbian的盒子简单分析</li><li>安装Armbian的简要步骤</li><li>安装Home Assistant的简要步骤</li></ol><span id="more"></span><h1 id="Home-Assistant简介"><a href="#Home-Assistant简介" class="headerlink" title="Home Assistant简介"></a>Home Assistant简介</h1><p>按照<a href="https://www.home-assistant.io/">官网</a>描述，HomeAssistant是一个开源的、以本地控制和隐私保护为基础的家庭自动化系统。有以下几个特点</p><h2 id="1-开放"><a href="#1-开放" class="headerlink" title="1. 开放"></a>1. 开放</h2><p>  HA是一个开源的平台系统，可以在<a href="https://github.com/home-assistant">github</a>找到相关源代码，同时它有丰富的开放API，因此有了丰富的插件（如Integration、Frontend等等）支持，可以带来这些好处：1）将其他平台的设备，全部接入HA，这样就实现了家庭智能设备的统一控制，如小米、涂鸦、Sonoff、；2）将HA上的设备统一接入其他平台，如你一堆的小米设备接入苹果的HomeKit，可以实现Siri来控制小米设备；3）其他自定义设备如软路由、NAS、DIY的设备通过各种方式接入HA控制；4）提供iOS、Android、PC各平台的控制终端</p><h2 id="2-本地部署"><a href="#2-本地部署" class="headerlink" title="2. 本地部署"></a>2. 本地部署</h2><p>  HA往往部署在本地的设备，这样有2个好处：1）速度快，比如你想做一个开门后自动开灯且播放欢迎提示音的自动化，使用云服务可能要几秒，使用家庭本地网络的HA会节省了公网网络传输的时间消耗；2）隐私，如果你比较担心家里的智能音箱、各种智能设备在偷偷监听上报数据（这个事情完全靠厂商自觉，本身智能设备就要持续上报数据，你无法判断是否上报了与其功能无关的数据），使用HA就没有这方面的苦恼了。</p><h2 id="3-更新频繁"><a href="#3-更新频繁" class="headerlink" title="3. 更新频繁"></a>3. 更新频繁</h2><p>  HA目前一个月要更新好几个版本，一些漏洞在持续修复，能力也在持续优化，同时有很大的社区支持，</p><h1 id="HA安装"><a href="#HA安装" class="headerlink" title="HA安装"></a>HA安装</h1><p>官网给出4中安装方法（后2中不推荐）：</p><ol><li>Home Assistant Operating System：作为操作系统直接安装在机器上</li><li>Home Assistant Container:容器安装，如docker</li><li>Home Assistant Supervised：手动安装（不推荐）</li><li>Home Assistant Core:手动安装（不推荐）</li></ol><p>HA底层基于Python，基本所有的系统都可以支持，所以几乎不挑硬件，X86、ARM平台都可以，官网推荐了两种ARM的单板系统（SBC，single-board computers）:</p><ol><li>Home assistant Yellow（基于树莓派）</li></ol><p><img src="https://www.crowdsupply.com/img/7b5c/home-assistant-amber-with-cm4-no-heat-sink-top_jpg_md-xl.jpg" alt="Home assistant Yellow"><br>2. Home assistant Blue（基于Odroid）<br><img src="https://cdn.hardkernel.com/wp-content/uploads/2020/07/odroidn2plusA.jpg" alt="Home assistant Blue"></p><h1 id="平替"><a href="#平替" class="headerlink" title="平替"></a>平替</h1><p>这两个SBC在中国不太好买，其次价格较高（Yellow的最低价格115刀，Blue的价格可以去搜Odroid N2，树莓派今年的价格也飙上去了）100刀都可以买到一个X86的主机来做server了。仔细看一下这个Blue，他的CPU是晶晨的S922X，晶晨还有S905系列，市场容量相当大，于是买了几个来试试。</p><h2 id="硬件要求"><a href="#硬件要求" class="headerlink" title="硬件要求"></a>硬件要求</h2><table><thead><tr><th>部件</th><th>要求</th><th>备注</th></tr></thead><tbody><tr><td>CPU</td><td>64位的4核ARM</td><td>32位的晶晨S805（ARMv7）应该是不行的，跑很多东西找不到合适的包。S905、S922的各种型号，全志，只要能装Armbian都可以</td></tr><tr><td>内存</td><td>1G勉强也够，最好2G</td><td>1G内存一般可用的有800M，我是用Docker跑，跑起来HA的7个容器，内存就已经捉襟见肘了，再跑一些插件、MQTT、nodered这些容器就不够用了，内存不够用会导致系统频繁读写交换空间Zram，导致系统负载高、无响应</td></tr><tr><td>磁盘&#x2F;TF卡</td><td>16G以上：8G的存储是不够的，armbian安装加上容器大概需要7G左右；最好是大牌的如铠侠、闪迪、三星这些；也可以外接一个16g以上的SSD</td><td>我之前用过杂牌TF卡，读写太慢会因为IO负载高最终导致系统无响应，后来用N1+铠侠64G，用了几个月感觉有点浪费，最后用了盒子原生的2+16eMMC的配置，刚好够</td></tr><tr><td>网络</td><td>有线网卡不需要千兆，百兆足够，；无线没太大用处</td><td>做服务器流量不大，但要响应快，有线比较靠谱</td></tr><tr><td>蓝牙</td><td>能驱动的板载蓝牙；USB蓝牙接收器；没有蓝牙也可以</td><td>蓝牙的功能很重要，很多智能设备都是蓝牙的，如果armbian系统没有可驱动的蓝牙，也可以有其他替代办法</td></tr></tbody></table><p>由此看出，2G内存+16geMMC的配置是比较划算的，如果没有特殊需求，不需要另加其他外设。目前市场上还可以买到海思的ARM盒子，但海思芯片刷Armbian的不多，社区文档页少（可以看这个：<a href="https://github.com/glinuz/hi3798mv100">glinuz&#x2F;hi3798mv100</a>），尽量还是选择其他芯片。</p><h2 id="试过的盒子"><a href="#试过的盒子" class="headerlink" title="试过的盒子"></a>试过的盒子</h2><h3 id="1-R3300-L"><a href="#1-R3300-L" class="headerlink" title="1. R3300-L"></a>1. R3300-L</h3><p><img src="https://user-images.githubusercontent.com/2712885/161371283-2a532ffd-d4c3-4c08-a9f4-2ae0ea84257f.jpg" alt="IMG_5931"><br><img src="https://user-images.githubusercontent.com/2712885/161371289-b178610d-5090-44cf-8f14-56a9d3fe80bc.jpg" alt="IMG_5932"></p><p>根据成色、是否刷机、配件不同，价格也不同，普遍在50-70左右。</p><p>最开始买了这个小红盒，由于含有一个读卡器，且通过AV孔可以不拆机按住Reset键从而直接刷机，所以还比较受欢迎。最开始刷了Openwrt+Docker-ce安装HA，因为内存只有1G，会出现上文说道的负载高无响应的问题，所以后来删除了HA，只用作Openwrt，Openwrt本身对内存的要求不高（只需要100M左右），目前一直在用，半年没重启过了，稳得很。</p><h3 id="2-N1"><a href="#2-N1" class="headerlink" title="2. N1"></a>2. N1</h3><p><img src="https://user-images.githubusercontent.com/2712885/161371533-2e883c96-e6f3-46e6-b671-a95c30632806.jpg" alt="n1"><br>现在全套配件的得150+了，不是很划算，但确实N1这种各方面都不错的盒子也不多。<br>N1真的是各方面都基本够用，S905D+千兆网口+蓝牙+双频WiFi，不太有短板，怪不得这么几年过去了还是这么火，蓝牙是博通的芯片，可以Armbian直接驱动。但是如果刷Armbian会觉得它没有读卡器比较鸡肋，当然用USB外接读卡器或者直接接SSD都是好选项。N1+读卡器+64G卡用了大半年，没太大的问题，就是感觉老外接一个读卡器怪难受。</p><h3 id="3-M401、E900V22C等新版魔百和"><a href="#3-M401、E900V22C等新版魔百和" class="headerlink" title="3. M401、E900V22C等新版魔百和"></a>3. M401、E900V22C等新版魔百和</h3><p><img src="https://user-images.githubusercontent.com/2712885/161371740-77038928-5101-4a5b-ae7e-0f7814c70822.jpg" alt="m401a"><br><img src="https://user-images.githubusercontent.com/2712885/161371952-f717f3af-c8dd-4748-9222-cd16f298e3ca.jpg" alt="m401a2"><br>原装全套（盒子+网线+HDMI线+蓝牙遥控）价格在70左右，盒子比较新，不太买得到单机头的<br>最近在网上捡了一个移动新出的盒子M401A，买的时候只看重了它2g内存+16geMMC的配置，终于不用外接TF卡了。买来之后发现这个CPU是S905L3A，性能还不错，只是当前蓝牙还无法驱动。先是插了一个蓝牙接收器，但是蓝牙老掉线，后来索性就不要蓝牙了。</p><h3 id="4-其他ARM盒子、板子"><a href="#4-其他ARM盒子、板子" class="headerlink" title="4. 其他ARM盒子、板子"></a>4. 其他ARM盒子、板子</h3><p>树莓派、香橙派、各种派</p><h1 id="安装步骤（卡刷）"><a href="#安装步骤（卡刷）" class="headerlink" title="安装步骤（卡刷）"></a>安装步骤（卡刷）</h1><p>卡刷或者线刷都可以，其中卡刷简单方便，不容易损坏盒子本身（丢三码），下文以卡刷为例</p><h3 id="1-寻找Armbian镜像并写入U盘或者TF卡"><a href="#1-寻找Armbian镜像并写入U盘或者TF卡" class="headerlink" title="1. 寻找Armbian镜像并写入U盘或者TF卡"></a>1. 寻找Armbian镜像并写入U盘或者TF卡</h3><p>根据型号在网上找到合适的镜像，注意尽量不要找太老的镜像，如果是Ubuntu尽量选1804版本的或者2004版本的，版本较老本身没有太大的问题，但随着软件更新，难免未来某些软件就不支持老版本的内核了。大家在网上找到的镜像其实都差不多，无非就是根据不同的硬件所带的dtb和驱动不同，所以如果无法找到相应的镜像，可以随便找一个较新的的镜像，修改合适的dtb就行了。<br>这里提供一个R3300L的镜像： <a href="https://pan.baidu.com/s/1BesJhaKfKMF1WJapmUH6_Q">https://pan.baidu.com/s/1BesJhaKfKMF1WJapmUH6_Q</a> 提取码: vs5g 下载：Armbian_5.99_Aml-g12_Ubuntu_bionic_default_5.3.0_rtl8189ftv.tar，不带桌面，带WiFi。<br>持续更新的镜像下载：<a href="https://github.com/zzcand111/amlogic-s9xxx-armbian">https://github.com/zzcand111/amlogic-s9xxx-armbian</a> 。历史的一些镜像下载：<a href="https://users.armbian.com/balbes150/arm-64/">https://users.armbian.com/balbes150/arm-64/</a> (5.9的内核)。<br>要注意，5.9的内核我已经试过写入eMMC，可以正常使用，如果是5.9以上的内核，很多人说刷入eMMC会导致无法启动。<br>将镜像解压出来img格式，用Rufus等软件写入TF卡或者U盘。</p><h3 id="2-更换DTB，从U盘启动Armbian"><a href="#2-更换DTB，从U盘启动Armbian" class="headerlink" title="2. 更换DTB，从U盘启动Armbian"></a>2. 更换DTB，从U盘启动Armbian</h3><p>写好U盘镜像后，U盘上会有一个FAT32的名叫BOOT的分区，如果是<a href="https://users.armbian.com/balbes150/arm-64/">https://users.armbian.com/balbes150/arm-64/</a> 下载的镜像，需要做2件事情：</p><ol><li>在extlinux&#x2F;extlinux.conf文件中修改dtb文件</li><li>将u-boot-s905（只针对S905) u-boot-s905x2-s922* u-boot-s905x-s912（x905[w,d,l]）中的某1个名词改为u-boot.ext</li></ol><p>如果是其他地方下载的，只需要在BOOT分区的根目录下的uEnv.ini文件中修改dtb文件即可。<br>M401a、E900V22c等s905L3a的芯片使用dtb：<code>meson-g12a-u200.dtb</code>，R3300L等s905L芯片使用<code>meson-gxl-s905x-p212.dtb</code>。其他的机器找到响应的dtb文件即可。</p><h4 id="U盘启动的方法"><a href="#U盘启动的方法" class="headerlink" title="U盘启动的方法"></a>U盘启动的方法</h4><p>R3300L用牙签插入AV孔，按住Reset键，然后插上电源。其他盒子可以尝试root后安装从U盘启动的APP，R401可以拆开外壳，Reset键在板子背后，其他还有按遥控器的方法，可以根据型号自行搜索。从U盘启动后可以看有线网络是否驱动，这个是最重要的，一般都可以驱动。<br>第一次启动可能会花几分钟时间，因为系统要执行一些初始化的任务，可以插上HDMI屏幕，看一下是否成功。</p><h3 id="3-备份eMMC的系统"><a href="#3-备份eMMC的系统" class="headerlink" title="3. 备份eMMC的系统"></a>3. 备份eMMC的系统</h3><p>进入U盘的Armbian系统，执行命令ddbr，根据提示选择备份系统到U盘。</p><h3 id="4-写入eMMC"><a href="#4-写入eMMC" class="headerlink" title="4. 写入eMMC"></a>4. 写入eMMC</h3><p>一般的CPU（ s905[x,w,l,x2,x3],s912,s922）执行命令<code>/root/install-aml.sh</code>，将系统写入eMMC。如果CPU是S905（不带任何后缀字母的版本），执行<code>/root/install-aml-s905-emmc.sh</code>。写入成功后断电重启。</p><h3 id="5-更新证书"><a href="#5-更新证书" class="headerlink" title="5. 更新证书"></a>5. 更新证书</h3><p>如果下载的比较老的镜像，在更换apt源之前需要先更新本机证书：<code>apt install --reinstall ca-certificates</code>，不然由于本机证书比较旧，换源后会识别新的更新源证书无效。</p><h3 id="6-换源"><a href="#6-换源" class="headerlink" title="6. 换源"></a>6. 换源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">deb-src  focal main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-security main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">deb-src http://ports.ubuntu.com/ focal-security main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-updates main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">deb-src http focal-updates main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-backports main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">deb-src http://ports.ubuntu.com/ focal-backports main restricted universe multiverse</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>换源后执行：<code>apt update</code></p><h3 id="7-安装docker-ce"><a href="#7-安装docker-ce" class="headerlink" title="7. 安装docker-ce"></a>7. 安装docker-ce</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建安装目录</span></span><br><span class="line">cd; mkdir download;cd download</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">下载安装脚本</span></span><br><span class="line">curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">赋予权限</span></span><br><span class="line">chmod a+x get-docker.sh </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">执行安装</span></span><br><span class="line">./get-docker.sh --mirror Aliyun</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>安装完成后，修改国内镜像（加速下载镜像），更改docker目标文件夹（方便备份）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">填入如下内容</span></span><br><span class="line">&#123;</span><br><span class="line">  &quot;bip&quot;: &quot;172.31.0.1/24&quot;,</span><br><span class="line">  &quot;data-root&quot;: &quot;/opt/docker/&quot;, #docker安装目录，如果eMMC不够，可以把此目录挂载到外部TF卡或者SSD</span><br><span class="line">  &quot;log-level&quot;: &quot;warn&quot;,</span><br><span class="line">  &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class="line">  &quot;log-opts&quot;: &#123;</span><br><span class="line">     &quot;max-size&quot;: &quot;10m&quot;,</span><br><span class="line">     &quot;max-file&quot;: &quot;5&quot;</span><br><span class="line">   &#125;,</span><br><span class="line">   &quot;registry-mirrors&quot;: [</span><br><span class="line">     &quot;https://xxxx.mirror.aliyuncs.com&quot; #加速镜像</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启docker</span></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="8-安装HA"><a href="#8-安装HA" class="headerlink" title="8. 安装HA"></a>8. 安装HA</h3><p>安装HA比较简单，只需要安装homeassistant-supervisor，它会自动安装所有其他镜像。根据网速、CPU、磁盘写入速度不同，安装时间不确定，大概十几分钟到1个小时之间。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">让homeassistant不做健康检查，/opt/docker为之前设置的docker安装目录</span></span><br><span class="line">vim /opt/docker/hassio/jobs.json</span><br><span class="line">写入：</span><br><span class="line">&#123;&quot;ignore_conditions&quot;: [&quot;healthy&quot;]&#125;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装hassio-supervisor</span></span><br><span class="line">docker run -d --name hassio_supervisor  --privileged \</span><br><span class="line">-v /var/run/docker.sock:/var/run/docker.sock \ </span><br><span class="line">-v /var/run/dbus:/var/run/dbus \</span><br><span class="line">-v /opt/docker/hassio:/data \ #指定HA目录</span><br><span class="line">-e SUPERVISOR_SHARE=&quot;/opt/docker/hassio&quot; \</span><br><span class="line">-e SUPERVISOR_NAME=hassio_supervisor \</span><br><span class="line">-e HOMEASSISTANT_REPOSITORY=&quot;homeassistant/qemuarm-64-homeassistant&quot; \</span><br><span class="line">--restart unless-stopped homeassistant/aarch64-hassio-supervisor:2022.03.5 #2022.03.5是版本号，可以去https://hub.docker.com/r/homeassistant/aarch64-hassio-supervisor/tags 找一个最新的稳定版版本</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>想看到执行过程的，可以执行<code>docker logs -f hassio_supervisor</code>查看实时日志，有可能有些版本的docker安装好supervisor后不能上网，可以临时添加<code>--net host</code>使它可以上网下载其他镜像，完成后再去掉此选项。因为这几个HA的镜像必须在一个内网才能互相访问。</p><h4 id="9-其他安装项"><a href="#9-其他安装项" class="headerlink" title="9. 其他安装项"></a>9. 其他安装项</h4><p>其他如MQTT、nodered可以在HA安装好后使用HAsupervisor以插件的形式安装，但如果想自己安装也可以。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装MQTT，需要进入镜像修改配置文件</span></span><br><span class="line">docker run --name mqtt --restart=always -dit -p 1883:1883 -p 9001:9001 -v /mosquitto/data -v /mosquitto/log eclipse-mosquitto</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装nodered，需要手动设置/opt/docker/node_red_data的访问权限</span></span><br><span class="line">chmod 777 /opt/docker/node_red_data</span><br><span class="line">docker run -d -it -p 1880:1880 -v /opt/docker/node_red_data:/data --name nodered nodered/node-red</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="10-网页打开HA页面，"><a href="#10-网页打开HA页面，" class="headerlink" title="10. 网页打开HA页面，"></a>10. 网页打开HA页面，</h3><p>假设Armbian的IP是192.168.3.3，则电脑打开<a href="http://192.168.3.3:8123/">http://192.168.3.3:8123</a>查看安装状态，如果安装完成，则会出现设置密码的界面。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文将包含如下内容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Home Assistant简介&lt;/li&gt;
&lt;li&gt;可安装Armbian的盒子简单分析&lt;/li&gt;
&lt;li&gt;安装Armbian的简要步骤&lt;/li&gt;
&lt;li&gt;安装Home Assistant的简要步骤&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="智能家居" scheme="http://lkisme.github.io/categories/%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85/"/>
    
    
    <category term="homeassistant docker armbian" scheme="http://lkisme.github.io/tags/homeassistant-docker-armbian/"/>
    
  </entry>
  
  <entry>
    <title>Home Assistant控制设备</title>
    <link href="http://lkisme.github.io/p/hass-config/"/>
    <id>http://lkisme.github.io/p/hass-config/</id>
    <published>2022-04-02T22:01:37.000Z</published>
    <updated>2022-04-02T14:13:52.629Z</updated>
    
    <content type="html"><![CDATA[<p>本文将包含如下内容：</p><ol><li>Home Assistant配置使用HACS</li><li>连接控制小米设备</li><li>连接控制Sonoff设备</li><li>连接控制涂鸦设备</li><li>连接控制自定义设备</li><li>使用苹果HomeKit控制HA设备</li><li>Home Assistant备份与恢复</li></ol><span id="more"></span><h1 id="安装HACS"><a href="#安装HACS" class="headerlink" title="安装HACS"></a>安装HACS</h1><p>在HA的主界面点击配置（Configuration）-&gt;设备和服务（Devices&amp;Services）-&gt;添加集成（Add integration）可以看到系统可用的集成列表，并且可以点击安装。自定义集成在安装成功后也需要在这里进行安装。<br>Home Assistant在启动时会扫描主目录（我的目录是&#x2F;opt&#x2F;docker&#x2F;hassio&#x2F;homeassistant）下的custom_components文件夹，识别其中的集成（Integration）并加载到可用集成列表。HA官方提供了丰富的集成，但还是有很多功能需要安装自定义集成来完成，安装自定义集成有一个比较简单的工具是HACS（Home Assistant Community Store）。<br>注意：HACS强依赖GitHub，它的更新、下载等动作都要去GitHub下载，如果你无法访问GitHub，可以不使用HACS，因为速度会让人崩溃。</p><h3 id="1-下载最新包"><a href="#1-下载最新包" class="headerlink" title="1. 下载最新包"></a>1. 下载最新包</h3><p>去<a href="https://github.com/hacs/integration/releases">https://github.com/hacs/integration/releases</a> 下载最新的包，将下载的包复制到custom_components文件夹内并解压，会生成一个hacs文件夹，重启HA。<br>或者去<a href="https://hacs.xyz/docs/setup/download">https://hacs.xyz/docs/setup/download</a> 查看文档，使用脚本下载。</p><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h3><p>在HA的主界面点击配置（Configuration）-&gt;设备和服务（Devices&amp;Services）-&gt;添加集成（Add integration），搜索HACS，并安装。之后按照<a href="https://hacs.xyz/docs/configuration/basic">https://hacs.xyz/docs/configuration/basic</a> 提示绑定GitHub账号。</p><h1 id="连接控制小米设备"><a href="#连接控制小米设备" class="headerlink" title="连接控制小米设备"></a>连接控制小米设备</h1><p>所有已经接入米家APP的设备，都可以通过此方法接入。</p><h3 id="安装Xiaomi-Miot-Auto"><a href="#安装Xiaomi-Miot-Auto" class="headerlink" title="安装Xiaomi Miot Auto"></a>安装<code>Xiaomi Miot Auto</code></h3><p>开发者是中国人，教程很丰富，功能很强大。安装教程可以参考：<a href="https://github.com/al-one/hass-xiaomi-miot/blob/master/README_zh.md">https://github.com/al-one/hass-xiaomi-miot/blob/master/README_zh.md</a><br>安装好之后需要配置米家账号，一定要选”更新设备列表“的选项，之后可以选择哪些设备想用HA来控制，毕竟像我有个扫地机器人，使用HA控制就毕竟鸡肋，所以索性排除在外。<br>注意：<code>Xiaomi Miot Auto</code>使用了米家的公共API，对于很多不同的设备支持方式也不同，会导致偶尔连不上设备的情况，且HA的服务器和设备最好在1个网段，不然一些局域网控制的设备会连不上，偶尔设备重启换IP后也会导致连不上。如果连不上某些设备，可以尝试在配置（Configuration）-&gt;设备和服务（Devices&amp;Services）-&gt;点击集成的重载按钮。</p><h3 id="连接蓝牙设备"><a href="#连接蓝牙设备" class="headerlink" title="连接蓝牙设备"></a>连接蓝牙设备</h3><p>使用<code>Xiaomi Miot Auto</code>已经可以控制米家设备了，但是很多设备使用的是云-云对接，就是说我们本地的指令需要通过<code>Xiaomi Miot Auto</code>传输到米家后台，然后再下发到设备上，对于一般的WiFi设备还好，但是对于像温度计、门磁传感器这种蓝牙设备，首先你需要1个蓝牙网关，其次<code>Xiaomi Miot Auto</code>采用的是轮询方式查询状态，如果你想做一个开门后自动开灯的自动化，可能你门都关上了，灯还没开，这种延迟可以达到几分钟，让人奔溃。而蓝牙是广播协议，如果使HA可以直接接收蓝牙设备的广播信息，那么就不需要蓝牙网关了，而且速度会特别快。</p><h4 id="1-安装蓝牙控制软件"><a href="#1-安装蓝牙控制软件" class="headerlink" title="1. 安装蓝牙控制软件"></a>1. 安装蓝牙控制软件</h4><p>在Armbian的命令行执行<code>armbian-config</code>，在跳出的界面中选择Network，选择安装Bluetooth。这一步是安装一些蓝牙相关的控制软件。<br>之后执行<code>hciconfig -a</code>，就可以看到蓝牙设备的信息（00:xx:xx:xx:xx:xx是蓝牙地址）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">root@arm-64:/opt/docker/hassio/homeassistant# hciconfig -a</span><br><span class="line">hci0:Type: Primary  Bus: USB</span><br><span class="line">BD Address: 00:xx:xx:xx:xx:xx  ACL MTU: 1021:8  SCO MTU: 64:1</span><br><span class="line">UP RUNNING </span><br><span class="line">RX bytes:1005 acl:0 sco:0 events:55 errors:0</span><br><span class="line">TX bytes:3181 acl:0 sco:0 commands:55 errors:0</span><br><span class="line">Features: 0xbf 0xfe 0xcf 0xfe 0xdb 0xff 0x7b 0x87</span><br><span class="line">Packet type: DM1 DM3 DM5 DH1 DH3 DH5 HV1 HV2 HV3 </span><br><span class="line">Link policy: RSWITCH SNIFF </span><br><span class="line">Link mode: SLAVE ACCEPT </span><br><span class="line">Name: &#x27;arm-64&#x27;</span><br><span class="line">Class: 0x0c0000</span><br><span class="line">Service Classes: Rendering, Capturing</span><br><span class="line">Device Class: Miscellaneous, </span><br><span class="line">HCI Version: 4.0 (0x6)  Revision: 0x1000</span><br><span class="line">LMP Version: 4.0 (0x6)  Subversion: 0x220e</span><br><span class="line">Manufacturer: Broadcom Corporation (15)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果命令不存在，则表示蓝牙控制软件没有安装成功。如果命令执行返回为空，则表示蓝牙设备没有成功驱动，或者没有蓝牙设备。</p><h4 id="2-安装Passive-BLE-monitor-integration"><a href="#2-安装Passive-BLE-monitor-integration" class="headerlink" title="2. 安装Passive BLE monitor integration"></a>2. 安装<code>Passive BLE monitor integration</code></h4><p>可以通过HACS安装：1）在HACS中搜索ble monitor，点击安装；2）安装成功后重启；3）点击配置（Configuration）-&gt;设备和服务（Devices&amp;Services）-&gt;添加集成（Add integration）进行添加。参考：<a href="https://github.com/custom-components/ble_monitor">https://github.com/custom-components/ble_monitor</a><br>此集成默认处于Passive模式，被动接收蓝牙设备消息，不会主动扫描设备，所以会更节省设备电量。</p><h4 id="2-将蓝牙设备添加到米家APP"><a href="#2-将蓝牙设备添加到米家APP" class="headerlink" title="2. 将蓝牙设备添加到米家APP"></a>2. 将蓝牙设备添加到米家APP</h4><p>我目前有5个温度计、2个小米门磁、1个青萍门磁，都要先通过手机添加到米家APP，因为这些设备都支持小米的加密协议，添加到米家APP后会生成加密密钥<code>BLE KEY</code>，在<code>Passive BLE monitor integration</code>的配置中需要使用它。<br>如果其他非米家蓝牙设备，且广播消息未加密的，可以自动识别并添加到此集成内。</p><h4 id="3-获取蓝牙设备的encryption-key"><a href="#3-获取蓝牙设备的encryption-key" class="headerlink" title="3. 获取蓝牙设备的encryption_key"></a>3. 获取蓝牙设备的<code>encryption_key</code></h4><p>ble_monitor官方给出了4个方法获取蓝牙设备的<code>encryption_key</code>，其他的都比较复杂，如果有Windows系统，可以下载<a href="https://github.com/PiotrMachowski/Xiaomi-cloud-tokens-extractor/releases/latest/download/token_extractor.exe">token_extractor.exe</a>，点击它然后根据提示输入用户名和密码，把输出的信息拷贝出来保存。其中有一行<code>BLE KEY</code>，就是之后要使用的<code>encryption_key</code>。</p><h4 id="4-配置集成"><a href="#4-配置集成" class="headerlink" title="4. 配置集成"></a>4. 配置集成</h4><p><img src="https://custom-components.github.io/ble_monitor/assets/images/configuration_screen.png"><br>在这个配置页面选择使用的蓝牙设备，在最后一项中根据Mac地址（对照上一步中拷贝下来的设备列表）选择需要配置的设备，然后填入<code>encryption_key</code>。按照这个步骤依次把设备配置好。</p><p>如果Armbian上没有蓝牙或者蓝牙设备无法驱动，可以使用ESPHome插件来转发蓝牙广播消息。</p><h1 id="连接Sonoff设备"><a href="#连接Sonoff设备" class="headerlink" title="连接Sonoff设备"></a>连接Sonoff设备</h1><p>如果你有Sonoff或者需要接入易微联APP的设备，可以安装插件：<a href="https://github.com/AlexxIT/SonoffLAN">https://github.com/AlexxIT/SonoffLAN</a> ，安装方法和其他一样，安装成功后在主目录下的<code>configuration.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sonoff:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">xxx</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xxx</span></span><br></pre></td></tr></table></figure><p>HA会在启动的时候扫描此文件和其他配置项，加载相应的集成。这个配置告诉HA要加载1个叫sonoff的集成。</p><h1 id="连接控制涂鸦设备"><a href="#连接控制涂鸦设备" class="headerlink" title="连接控制涂鸦设备"></a>连接控制涂鸦设备</h1><p>涂鸦是智能家居行业比较大的解决方案提供商，在国内外都有很大的市场，网上买到的智能设备可能是接入涂鸦智能APP的。目前有2种方法，对于一般的设备，可以使用HA官方的Tuya集成，配置方法比较复杂，可以参考涂鸦的<a href="https://developer.tuya.com/cn/docs/iot/Home-assistant-tuya-intergration?id=Kb0eqjig0utdd">官方文档</a> 。<br>如果官方插件暂时无法支持，可以使用<a href="https://github.com/rospogrigio/localtuya">SonoffLAN</a> ，重点是使用工具找到相应的DP（Data Point），然后通过此插件修改各种DP的值。</p><h1 id="连接控制自定义设备"><a href="#连接控制自定义设备" class="headerlink" title="连接控制自定义设备"></a>连接控制自定义设备</h1><p>如果是自定义的设备，可以通过MQTT连接到HA来控制。</p><h1 id="使用苹果HomeKit控制HA设备"><a href="#使用苹果HomeKit控制HA设备" class="headerlink" title="使用苹果HomeKit控制HA设备"></a>使用苹果HomeKit控制HA设备</h1><p>HA自带HomeKit集成，点击配置（Configuration）-&gt;设备和服务（Devices&amp;Services）-&gt;添加集成（Add integration），搜索<code>HomeKit</code>进行安装。在之后的配置界面<code>HomeKit Mode</code>选择<code>bridge</code>，表示把HA当做一个网桥来设置，在<code>Inclusion Mode</code>选择<code>include</code>，表示手动选择哪些设备要暴露给HomeKit来控制。</p><p>配置完成后在HA的通知信息里可以看到提醒，会生成一个二维码，使用苹果设备在HA的统一网段内，添加HomeKit设备，根据提示一步步操作就可以了。</p><h1 id="Home-Assistant备份与恢复"><a href="#Home-Assistant备份与恢复" class="headerlink" title="Home Assistant备份与恢复"></a>Home Assistant备份与恢复</h1><p>点击配置（Configuration）-&gt;插件、备份和Supervisor（Add-ons、Backup&amp;Supervisor）-&gt;备份（Backup）</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文将包含如下内容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Home Assistant配置使用HACS&lt;/li&gt;
&lt;li&gt;连接控制小米设备&lt;/li&gt;
&lt;li&gt;连接控制Sonoff设备&lt;/li&gt;
&lt;li&gt;连接控制涂鸦设备&lt;/li&gt;
&lt;li&gt;连接控制自定义设备&lt;/li&gt;
&lt;li&gt;使用苹果HomeKit控制HA设备&lt;/li&gt;
&lt;li&gt;Home Assistant备份与恢复&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="智能家居" scheme="http://lkisme.github.io/categories/%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85/"/>
    
    
    <category term="homeassistant armbian" scheme="http://lkisme.github.io/tags/homeassistant-armbian/"/>
    
  </entry>
  
  <entry>
    <title>大金空调面板Hack添加WiFi支持</title>
    <link href="http://lkisme.github.io/p/esp8266-control-daikin-ac/"/>
    <id>http://lkisme.github.io/p/esp8266-control-daikin-ac/</id>
    <published>2022-03-29T14:59:12.000Z</published>
    <updated>2022-04-02T14:13:52.629Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>装修时家里装了大金的1拖2中央空调，当时可以选“金制家中”的套餐，只要加1000块，结果脑抽没选。入住之后马上感觉到不爽的地方：</p><ol><li>无法远程控制：夏天下班回家后，家里还是很热，立马开空调也要过几分钟才会凉下来，冬天同理。</li><li>无法远程控制：冬天要起床开关空调，</li><li>其他扩展功能：定时关定时开只能在面板上选择，且只能以半小时为单位。</li><li>指示灯的问题：晚上睡觉指示灯一直亮着，烦人</li></ol><span id="more"></span><h2 id="可选方案"><a href="#可选方案" class="headerlink" title="可选方案"></a>可选方案</h2><p>首先是想买一套金制家中，大概就是一个Wi-Fi网关+几个传感器，这个主要问题是要装在外机上（大误），于是放弃了，继续搜索可以接入米家控制的设备，大概有三种：</p><ol><li>大金官方的方案：WiFi控制器（金制家中）</li><li>vrf面板，价格在300-600之间，要替换掉自带面板，特点是安装简单，且可以卖掉原版的线控，回一波血</li><li>线控网关，原理和#1一样，接在空调内机的P1&#x2F;P2上，价格在300-400之间。安装比较麻烦</li><li>集控网关，原理和金制家中一样，接在F1&#x2F;F2上，可以控制所有内机。价格在1000-2000之间，安装难度和#2一样，特点是一台机器可以控制所有内机，如果家里内机较多，可以考虑这个</li><li>DIY：难度较高</li></ol><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>下图是线控网关的安装拓扑</p><img width="645" alt="xiankong" src="https://user-images.githubusercontent.com/2712885/144000776-37a099fd-2056-4140-bc03-1bcf7cb4c0b5.png">对于大金空调的控制，大概的方式可以分为2种<h3 id="F1-x2F-F2"><a href="#F1-x2F-F2" class="headerlink" title="F1&#x2F;F2"></a>F1&#x2F;F2</h3><p>单台外机：空调网关的F1&#x2F;F2连接大金中央空调的室内机或者室外机的“F1&#x2F;F2”。<br>多台外机：空调网关的F1&#x2F;F2连接大金中央空调室外机的“F1F2”。</p><p>金制家中应该就是这种方案，此外集控网关也是这种方案，优点是一台机器控制所有空调。<br><img src="https://user-images.githubusercontent.com/2712885/144000705-39cbc944-6fdf-4b57-98e2-7dacc64d3f5c.jpg" alt="jikong"></p><h3 id="P1-x2F-P2"><a href="#P1-x2F-P2" class="headerlink" title="P1&#x2F;P2"></a>P1&#x2F;P2</h3><p>基于HBS协议的载波通信。没有太深入的了解，大概就是这两根线既可以提供电源（压差大概15V多一点），又可以载波通信（高20V，低10V）。国内可以买到的很多线控网关都是做了一个HBS的解析器+控制器。网上也有开源的方案，但要自己做硬件，于是放弃。<br><img src="https://user-images.githubusercontent.com/2712885/144000648-b6d5cf7c-6c57-4ea9-88b1-d5709a9bb5c8.png" alt="hbs-chip"></p><p>所有的线控都是内机-&gt;解码-&gt;控制器-&gt;网关这样的链路。而自带的面板只是缺了「网关」这一环，所以我们可以制作一个可以控制面板的带有网关功能的设备，就可以轻松实现联网控制空调了。</p><h2 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h2><p>首先我买了一个线控网关，接起来真的费劲，接线图如下所示：<br><img src="https://user-images.githubusercontent.com/2712885/161364516-fc45bee4-67c9-4025-886c-c05143622af1.JPG" alt="大金控制面板"></p><p>其原理上边讲了，相当于一个内机接了2个遥控，第二个遥控配上了WiFi网关。</p><p>第二个内机不想再买线控网关了，觉得这看起来功能很简单啊，于是在网上搜相关的方案，搜到了这个：<a href="https://lecoding.com/post/2020/daikin-remote-controller-hack/">https://lecoding.com/post/2020/daikin-remote-controller-hack/</a> ，这偏文章里通过红外来控制原始的控制面板，但有以下几个问题：如果需要远程控制，需要再加一个红外网关。而我最近在研究8266，手里拿着锤子看见所有东西都是钉子，于是开始改造。但改造失败，因为接上8266之后面板就会重启，之后会不断的重启，另外由于没有断电操作，把面板上的电源指示灯LED烧了，额外解决了最开始的#4个诉求。。。</p><p><img src="https://user-images.githubusercontent.com/2712885/144226767-0e6ff656-9adb-4948-8b66-f4ee0aca2bbd.jpg" alt="front_before"></p><p>改造计划暂时搁置，最近又在英文世界里冲浪，找找老外的解决方案，找到了一个使用Arduino来解决问题的：<a href="https://mattala.com.au/2016/08/14/airduino-network-enabling-the-daikin-vrv-with-the-brc1d61-or-similar-thermostats/">AIRDUINO | ADDING NETWORK REMOTE CONTROL TO THE DAIKIN VRV WITH THE BRC1D61 OR SIMILAR THERMOSTATS</a>，于是又燃起了改造的激情，这次增加了读取LED状态的接线，这样就能精确控制空调了。接线如下：<br><img src="https://user-images.githubusercontent.com/2712885/144226833-8ad835fd-67be-4d16-a9c5-cabd103a09f9.jpg" alt="front_done"></p><p><img src="https://user-images.githubusercontent.com/2712885/144226809-9030fd06-a16e-4151-8d8b-39529d08844e.jpg" alt="back"></p><h3 id="电源问题"><a href="#电源问题" class="headerlink" title="电源问题"></a>电源问题</h3><p>接上之后好了几个小时，面板又重启了，另外一接上8266，就能听到滋滋的声音，应该是面板上15V转5V的变压器受不了额外的载荷，发出了以此抖动的声音。于是不得已，又从相邻的卧室灯开关的接线盒拉出来了220V的线：</p><h2 id="最终方案"><a href="#最终方案" class="headerlink" title="最终方案"></a>最终方案</h2><ol><li>220V接AC-DC电源变3.3V接8266电源，将8266和电源塞进了面板背后的86接线盒内</li><li>面板的GND接8266的GND</li><li>面板的2条引线分别串联20K左右的电阻，接8266的GPIO引脚</li><li>HA配置如下所示</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- platform: mqtt</span><br><span class="line">  name: &quot;卧室空调&quot;</span><br><span class="line">  unique_id: switch.wifi.bedroom_ac</span><br><span class="line">  payload_on: &quot;1&quot;</span><br><span class="line">  payload_off: &quot;0&quot;</span><br><span class="line">  state_topic: daikin/bedroom/state</span><br><span class="line">  command_topic: daikin/bedroom/command</span><br><span class="line">  availability_topic: daikin/bedroom/availability</span><br><span class="line">  json_attributes_topic: daikin/bedroom/attrs</span><br></pre></td></tr></table></figure><p>家里有一台N1装了HASS+NodeRed+MQTT，自制了一个离线的语音控制器放在卧室，这样就可以开关（灯、暖气、空调、其他）基本靠吼了。</p><h3 id="最终形态"><a href="#最终形态" class="headerlink" title="最终形态"></a>最终形态</h3><p><img src="https://user-images.githubusercontent.com/2712885/160620943-1db84d92-4889-4da0-9465-6e537c43c9e3.jpg" alt="最终形态"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;装修时家里装了大金的1拖2中央空调，当时可以选“金制家中”的套餐，只要加1000块，结果脑抽没选。入住之后马上感觉到不爽的地方：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;无法远程控制：夏天下班回家后，家里还是很热，立马开空调也要过几分钟才会凉下来，冬天同理。&lt;/li&gt;
&lt;li&gt;无法远程控制：冬天要起床开关空调，&lt;/li&gt;
&lt;li&gt;其他扩展功能：定时关定时开只能在面板上选择，且只能以半小时为单位。&lt;/li&gt;
&lt;li&gt;指示灯的问题：晚上睡觉指示灯一直亮着，烦人&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="智能家居" scheme="http://lkisme.github.io/categories/%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85/"/>
    
    
    <category term="homeassistant 大金 智能家居" scheme="http://lkisme.github.io/tags/homeassistant-%E5%A4%A7%E9%87%91-%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85/"/>
    
  </entry>
  
</feed>
